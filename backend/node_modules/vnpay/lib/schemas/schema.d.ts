import { z } from 'zod';
import { VnpCurrCode, VnpLocale, VnpOrderType } from '../enums';
export declare const ConfigVnpaySchema: z.ZodObject<{
    /**
     * Mã tmn của đối tác
     * @en Merchant tmn code
     */
    tmnCode: z.ZodString;
    /**
     * Mật khẩu bảo mật của đối tác
     * @en Secure secret of merchant
     */
    secureSecret: z.ZodString;
    /**
     * Đường dẫn trả về của đối tác
     * @en Return url of merchant
     */
    returnUrl: z.ZodOptional<z.ZodString>;
    /**
     * Phiên bản của API VNPay
     * @en Version of VNPay API
     */
    vnp_Version: z.ZodOptional<z.ZodString>;
    /**
     * Đơn vị tiền tệ
     * @en Currency code
     */
    vnp_CurrCode: z.ZodOptional<z.ZodNativeEnum<typeof VnpCurrCode>>;
    /**
     * Ngôn ngữ hiển thị trên cổng thanh toán
     * @en Language display on payment gateway
     */
    vnp_Locale: z.ZodOptional<z.ZodNativeEnum<typeof VnpLocale>>;
    /**
     * Mã danh mục hàng hóa. Mỗi hàng hóa sẽ thuộc một nhóm danh mục do VNPAY quy định.
     * @en Category code of product. Each product will belong to a category group defined by VNPAY
     * @see https://sandbox.vnpayment.vn/apis/docs/loai-hang-hoa/
     */
    vnp_OrderType: z.ZodOptional<z.ZodUnion<[z.ZodNativeEnum<typeof VnpOrderType>, z.ZodString]>>;
    /**
     * Đường dẫn tới API của VNPay
     * @en API host url of VNPay
     * @default 'https://sandbox.vnpayment.vn'
     * @example 'https://sandbox.vnpayment.vn'
     */
    api_Host: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    tmnCode: string;
    secureSecret: string;
    returnUrl?: string | undefined;
    vnp_Version?: string | undefined;
    vnp_CurrCode?: VnpCurrCode.VND | undefined;
    vnp_Locale?: VnpLocale | undefined;
    vnp_OrderType?: string | undefined;
    api_Host?: string | undefined;
}, {
    tmnCode: string;
    secureSecret: string;
    returnUrl?: string | undefined;
    vnp_Version?: string | undefined;
    vnp_CurrCode?: VnpCurrCode.VND | undefined;
    vnp_Locale?: VnpLocale | undefined;
    vnp_OrderType?: string | undefined;
    api_Host?: string | undefined;
}>;
export declare const commonSchema: z.ZodObject<{
    /**
     * Số tiền thanh toán. VNPAY phản hồi số tiền nhân thêm 100 lần.
     * @en Amount of payment. VNPAY responds to the amount received plus 100 times.
     */
    vnp_Amount: z.ZodNumber;
    /**
     * Thông tin mô tả nội dung thanh toán (Tiếng Việt, không dấu).
     * @en Description of payment (Vietnamese, no accent)
     * @example Thanh toan don hang 12345
     */
    vnp_OrderInfo: z.ZodString;
    /**
     * Mã tham chiếu của giao dịch tại hệ thống của merchant.
     * Mã này là duy nhất dùng để phân biệt các đơn hàng gửi sang VNPAY.
     * Không được trùng lặp trong ngày.
     * @en Reference code of transaction on merchant system. This code is unique to distinguish orders sent to VNPAY. Not duplicated in a day.
     * @example 123456
     */
    vnp_TxnRef: z.ZodString;
    /**
     * Mã website của merchant trên hệ thống của VNPAY
     * @en Website code of merchant on VNPAY system
     * @example 2QXUI4J4
     */
    vnp_TmnCode: z.ZodOptional<z.ZodString>;
    /**
     * Mã Ngân hàng thanh toán
     * @en Bank code
     * @example NCB
     */
    vnp_BankCode: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    vnp_Amount: number;
    vnp_OrderInfo: string;
    vnp_TxnRef: string;
    vnp_TmnCode?: string | undefined;
    vnp_BankCode?: string | undefined;
}, {
    vnp_Amount: number;
    vnp_OrderInfo: string;
    vnp_TxnRef: string;
    vnp_TmnCode?: string | undefined;
    vnp_BankCode?: string | undefined;
}>;
export declare const BuildPaymentUrlSchema: z.ZodObject<{
    vnp_Amount: z.ZodNumber;
    vnp_OrderInfo: z.ZodString;
    vnp_TxnRef: z.ZodString;
    vnp_TmnCode: z.ZodOptional<z.ZodString>;
    vnp_BankCode: z.ZodOptional<z.ZodString>;
    vnp_Version: z.ZodOptional<z.ZodString>;
    vnp_Command: z.ZodOptional<z.ZodString>;
    vnp_CreateDate: z.ZodOptional<z.ZodNumber>;
    vnp_CurrCode: z.ZodOptional<z.ZodNativeEnum<typeof VnpCurrCode>>;
    vnp_IpAddr: z.ZodOptional<z.ZodString>;
    vnp_Locale: z.ZodOptional<z.ZodNativeEnum<typeof VnpLocale>>;
    vnp_OrderType: z.ZodOptional<z.ZodUnion<[z.ZodNativeEnum<typeof VnpOrderType>, z.ZodString]>>;
    vnp_ReturnUrl: z.ZodOptional<z.ZodString>;
    vnp_SecretKey: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    vnp_Amount: number;
    vnp_OrderInfo: string;
    vnp_TxnRef: string;
    vnp_TmnCode?: string | undefined;
    vnp_BankCode?: string | undefined;
    vnp_Version?: string | undefined;
    vnp_Command?: string | undefined;
    vnp_CreateDate?: number | undefined;
    vnp_CurrCode?: VnpCurrCode.VND | undefined;
    vnp_IpAddr?: string | undefined;
    vnp_Locale?: VnpLocale | undefined;
    vnp_OrderType?: string | undefined;
    vnp_ReturnUrl?: string | undefined;
    vnp_SecretKey?: string | undefined;
}, {
    vnp_Amount: number;
    vnp_OrderInfo: string;
    vnp_TxnRef: string;
    vnp_TmnCode?: string | undefined;
    vnp_BankCode?: string | undefined;
    vnp_Version?: string | undefined;
    vnp_Command?: string | undefined;
    vnp_CreateDate?: number | undefined;
    vnp_CurrCode?: VnpCurrCode.VND | undefined;
    vnp_IpAddr?: string | undefined;
    vnp_Locale?: VnpLocale | undefined;
    vnp_OrderType?: string | undefined;
    vnp_ReturnUrl?: string | undefined;
    vnp_SecretKey?: string | undefined;
}>;
export declare const ReturnQueryFromVNPaySchema: z.ZodObject<{
    vnp_Amount: z.ZodNumber;
    vnp_OrderInfo: z.ZodString;
    vnp_TxnRef: z.ZodString;
    vnp_TmnCode: z.ZodOptional<z.ZodString>;
    vnp_BankCode: z.ZodOptional<z.ZodString>;
    vnp_BankTranNo: z.ZodOptional<z.ZodString>;
    vnp_CardType: z.ZodOptional<z.ZodString>;
    vnp_PayDate: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    vnp_TransactionNo: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    vnp_ResponseCode: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    vnp_TransactionStatus: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    vnp_SecureHashType: z.ZodOptional<z.ZodString>;
    vnp_SecureHash: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    vnp_Amount: number;
    vnp_OrderInfo: string;
    vnp_TxnRef: string;
    vnp_TmnCode?: string | undefined;
    vnp_BankCode?: string | undefined;
    vnp_BankTranNo?: string | undefined;
    vnp_CardType?: string | undefined;
    vnp_PayDate?: string | number | undefined;
    vnp_TransactionNo?: string | number | undefined;
    vnp_ResponseCode?: string | number | undefined;
    vnp_TransactionStatus?: string | number | undefined;
    vnp_SecureHashType?: string | undefined;
    vnp_SecureHash?: string | undefined;
}, {
    vnp_Amount: number;
    vnp_OrderInfo: string;
    vnp_TxnRef: string;
    vnp_TmnCode?: string | undefined;
    vnp_BankCode?: string | undefined;
    vnp_BankTranNo?: string | undefined;
    vnp_CardType?: string | undefined;
    vnp_PayDate?: string | number | undefined;
    vnp_TransactionNo?: string | number | undefined;
    vnp_ResponseCode?: string | number | undefined;
    vnp_TransactionStatus?: string | number | undefined;
    vnp_SecureHashType?: string | undefined;
    vnp_SecureHash?: string | undefined;
}>;
export declare const VerifyReturnUrlSchema: z.ZodObject<{
    vnp_Amount: z.ZodNumber;
    vnp_OrderInfo: z.ZodString;
    vnp_TxnRef: z.ZodString;
    vnp_TmnCode: z.ZodOptional<z.ZodString>;
    vnp_BankCode: z.ZodOptional<z.ZodString>;
    vnp_BankTranNo: z.ZodOptional<z.ZodString>;
    vnp_CardType: z.ZodOptional<z.ZodString>;
    vnp_PayDate: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    vnp_TransactionNo: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    vnp_ResponseCode: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    vnp_TransactionStatus: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    vnp_SecureHashType: z.ZodOptional<z.ZodString>;
    vnp_SecureHash: z.ZodOptional<z.ZodString>;
    isSuccess: z.ZodDefault<z.ZodBoolean>;
    message: z.ZodOptional<z.ZodDefault<z.ZodString>>;
}, "strict", z.ZodTypeAny, {
    vnp_Amount: number;
    vnp_OrderInfo: string;
    vnp_TxnRef: string;
    isSuccess: boolean;
    vnp_TmnCode?: string | undefined;
    vnp_BankCode?: string | undefined;
    vnp_BankTranNo?: string | undefined;
    vnp_CardType?: string | undefined;
    vnp_PayDate?: string | number | undefined;
    vnp_TransactionNo?: string | number | undefined;
    vnp_ResponseCode?: string | number | undefined;
    vnp_TransactionStatus?: string | number | undefined;
    vnp_SecureHashType?: string | undefined;
    vnp_SecureHash?: string | undefined;
    message?: string | undefined;
}, {
    vnp_Amount: number;
    vnp_OrderInfo: string;
    vnp_TxnRef: string;
    vnp_TmnCode?: string | undefined;
    vnp_BankCode?: string | undefined;
    vnp_BankTranNo?: string | undefined;
    vnp_CardType?: string | undefined;
    vnp_PayDate?: string | number | undefined;
    vnp_TransactionNo?: string | number | undefined;
    vnp_ResponseCode?: string | number | undefined;
    vnp_TransactionStatus?: string | number | undefined;
    vnp_SecureHashType?: string | undefined;
    vnp_SecureHash?: string | undefined;
    isSuccess?: boolean | undefined;
    message?: string | undefined;
}>;
export type ConfigVnpaySchema = z.infer<typeof ConfigVnpaySchema>;
export type BuildPaymentUrlSchema = z.infer<typeof BuildPaymentUrlSchema>;
export type ReturnQueryFromVNPaySchema = z.infer<typeof ReturnQueryFromVNPaySchema>;
export type VerifyReturnUrlSchema = z.infer<typeof VerifyReturnUrlSchema>;
