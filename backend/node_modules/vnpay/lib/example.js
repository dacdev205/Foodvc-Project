"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const crypto_1 = __importDefault(require("crypto"));
const vnpay_1 = require("./vnpay");
const utils_1 = require("./utils");
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        const secret = 'secret';
        const vnpay = new vnpay_1.VNPay({
            tmnCode: '2QXUI4B4',
            secureSecret: secret,
            api_Host: 'https://sandbox.vnpayment.vn',
        });
        // Create payment url
        console.log('----url----------');
        const urlString = yield vnpay.buildPaymentUrl({
            vnp_Amount: 10000,
            vnp_IpAddr: '1.1.1.1',
            vnp_TxnRef: '123456',
            vnp_OrderInfo: '123456',
            vnp_OrderType: 'other',
            vnp_ReturnUrl: 'http://localhost:3000/return',
        });
        console.log(urlString);
        // Verify return url, ipn call
        console.log('----verify response----------');
        const queryResponseFromVNPay = {
            // sample return url from vnpay
            vnp_Amount: 10000,
            vnp_BankCode: 'NCB',
            vnp_BankTranNo: '123456',
            vnp_CardType: 'ATM',
            vnp_OrderInfo: '123456',
            vnp_PayDate: (0, utils_1.dateFormat)(new Date()),
            vnp_ResponseCode: '00',
            vnp_TmnCode: '2QXUI4B4',
            vnp_TransactionNo: '123456',
            vnp_TxnRef: '123456',
        };
        const verify = yield vnpay.verifyReturnUrl(Object.assign(Object.assign({}, queryResponseFromVNPay), { vnp_SecureHash: getSampleSecureHash(queryResponseFromVNPay, secret) }));
        console.log(verify);
        // Query dr
        console.log('----querydr----------');
        const queryDrResult = yield vnpay.queryDr({
            vnp_CreateDate: 20210809121213,
            vnp_IpAddr: '127.0.0.1',
            vnp_OrderInfo: 'hihihi',
            vnp_RequestId: '1212123',
            vnp_TransactionDate: 20210809121212,
            vnp_TransactionNo: 121212,
            vnp_TxnRef: '112121',
        });
        console.log(queryDrResult);
    });
}
// This function is used to generate secure hash for testing purpose
function getSampleSecureHash(queryResponseFromVNPay, secret) {
    const searchParams = new URLSearchParams();
    Object.entries(queryResponseFromVNPay)
        .sort(([key1], [key2]) => key1.toString().localeCompare(key2.toString()))
        .forEach(([key, value]) => {
        // Skip empty value
        if (value === '' || value === undefined || value === null) {
            return;
        }
        searchParams.append(key, value.toString());
    });
    return crypto_1.default
        .createHmac('sha512', secret)
        .update(Buffer.from(searchParams.toString(), 'utf-8'))
        .digest('hex');
}
main();
