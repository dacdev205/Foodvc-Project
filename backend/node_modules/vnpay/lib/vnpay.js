"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VNPay = void 0;
const crypto_1 = __importDefault(require("crypto"));
const moment_timezone_1 = __importDefault(require("moment-timezone"));
const constants_1 = require("./constants");
const enums_1 = require("./enums");
const common_1 = require("./utils/common");
const schemas_1 = require("./schemas");
/**
 * Lớp hỗ trợ thanh toán qua VNPay
 * @en VNPay class to support VNPay payment
 * @see https://sandbox.vnpayment.vn/apis/docs/huong-dan-tich-hop/
 *
 * @example
 * import { VNPay } from 'vnpay';
 *
 * const vnpay = new VNPay({
 *     api_Host: 'https://sandbox.vnpayment.vn',
 *     tmnCode: 'TMNCODE',
 *     secureSecret: 'SERCRET',
 * });
 *
 * const tnx = '12345678'; // Generate your own transaction code
 * const urlString = await vnpay.buildPaymentUrl({
 *     vnp_Amount: 100000,
 *      vnp_IpAddr: '192.168.0.1',
 *      vnp_ReturnUrl: 'http://localhost:8888/order/vnpay_return',
 *      vnp_TxnRef: tnx,
 *      vnp_OrderInfo: `Thanh toan cho ma GD: ${tnx}`,
 * }),
 *
 */
class VNPay {
    constructor(_a) {
        var { api_Host = constants_1.VNPAY_GATEWAY_SANDBOX_HOST, vnp_Version = constants_1.VNP_VERSION, vnp_CurrCode = enums_1.VnpCurrCode.VND, vnp_Locale = enums_1.VnpLocale.VN } = _a, init = __rest(_a, ["api_Host", "vnp_Version", "vnp_CurrCode", "vnp_Locale"]);
        this.CRYPTO_ALGORITHM = 'sha512';
        this.CRYPTO_ENCODING = 'utf-8';
        this.vnp_Command = constants_1.VNP_DEFAULT_COMMAND;
        this.vnp_OrderType = enums_1.VnpOrderType.OTHER;
        this.globalConfig = schemas_1.ConfigVnpaySchema.parse(Object.assign({ api_Host,
            vnp_Version,
            vnp_CurrCode,
            vnp_Locale }, init));
    }
    /**
     * Lấy cấu hình mặc định của VNPay
     * @en Get default config of VNPay
     */
    get defaultConfig() {
        return {
            vnp_Version: this.globalConfig.vnp_Version,
            vnp_CurrCode: this.globalConfig.vnp_CurrCode,
            vnp_Locale: this.globalConfig.vnp_Locale,
            vnp_Command: this.vnp_Command,
            vnp_OrderType: this.vnp_OrderType,
        };
    }
    /**
     * Phương thức xây dựng, tạo thành url thanh toán của VNPay
     * @en Build the payment url
     *
     * @param {BuildPaymentUrlDTO} payload - Payload that contains the information to build the payment url
     * @returns {string} The payment url string
     */
    buildPaymentUrl(payload) {
        return new Promise((resolve, reject) => {
            var _a;
            try {
                const validatedPayload = schemas_1.BuildPaymentUrlSchema.parse(payload);
                if (!validatedPayload.vnp_ReturnUrl) {
                    validatedPayload.vnp_ReturnUrl = this.globalConfig.returnUrl;
                }
                const data = Object.assign(Object.assign({}, this.defaultConfig), validatedPayload);
                const timeGMT7 = (0, moment_timezone_1.default)(new Date()).tz('Asia/Ho_Chi_Minh').format();
                data.vnp_CreateDate = (0, common_1.dateFormat)(new Date(timeGMT7), 'yyyyMMddHHmmss');
                data.vnp_Amount = data.vnp_Amount * 100;
                data.vnp_TmnCode = this.globalConfig.tmnCode;
                const redirectUrl = new URL((0, common_1.resolveUrlString)((_a = this.globalConfig.api_Host) !== null && _a !== void 0 ? _a : constants_1.VNPAY_GATEWAY_SANDBOX_HOST, constants_1.GATEWAY_ENDPOINT));
                Object.entries(data)
                    .sort(([key1], [key2]) => key1.toString().localeCompare(key2.toString()))
                    .forEach(([key, value]) => {
                    // Skip empty value
                    if (!value || value === '' || value === undefined || value === null) {
                        return;
                    }
                    redirectUrl.searchParams.append(key, value.toString());
                });
                const hmac = crypto_1.default.createHmac(this.CRYPTO_ALGORITHM, this.globalConfig.secureSecret);
                const signed = hmac
                    .update(Buffer.from(redirectUrl.search.slice(1).toString(), this.CRYPTO_ENCODING))
                    .digest('hex');
                redirectUrl.searchParams.append('vnp_SecureHash', signed);
                return resolve(redirectUrl.toString());
            }
            catch (error) {
                return reject(error);
            }
        });
    }
    /**
     * Phương thức xác thực tính đúng đắn của các tham số trả về từ VNPay
     * @en Method to verify the return url from VNPay
     *
     * @param {ReturnQueryFromVNPaySchema} query - The object of data return from VNPay
     * @returns {Promise<VerifyReturnUrlSchema>} The return object
     */
    verifyReturnUrl(query) {
        return new Promise((resolve, reject) => {
            var _a, _b;
            try {
                const vnpayReturnQuery = schemas_1.ReturnQueryFromVNPaySchema.parse(query);
                const secureHash = vnpayReturnQuery.vnp_SecureHash;
                // Will be remove when append to URLSearchParams
                delete vnpayReturnQuery.vnp_SecureHash;
                delete vnpayReturnQuery.vnp_SecureHashType;
                const outputResults = {
                    isSuccess: vnpayReturnQuery.vnp_ResponseCode === '00',
                    message: (0, common_1.getResponseByStatusCode)((_b = (_a = vnpayReturnQuery.vnp_ResponseCode) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : '', this.defaultConfig.vnp_Locale),
                };
                const searchParams = new URLSearchParams();
                Object.entries(vnpayReturnQuery)
                    .sort(([key1], [key2]) => key1.toString().localeCompare(key2.toString()))
                    .forEach(([key, value]) => {
                    // Skip empty value
                    if (value === '' || value === undefined || value === null) {
                        return;
                    }
                    searchParams.append(key, value.toString());
                });
                const hmac = crypto_1.default.createHmac(this.CRYPTO_ALGORITHM, this.globalConfig.secureSecret);
                const signed = hmac
                    .update(Buffer.from(searchParams.toString(), this.CRYPTO_ENCODING))
                    .digest('hex');
                if (secureHash === signed) {
                    Object.assign(outputResults, {
                        isSuccess: vnpayReturnQuery.vnp_ResponseCode === '00',
                    });
                }
                else {
                    Object.assign(outputResults, {
                        isSuccess: false,
                        message: 'Wrong checksum',
                    });
                }
                const returnObject = schemas_1.VerifyReturnUrlSchema.parse(Object.assign(Object.assign({}, vnpayReturnQuery), outputResults));
                resolve(returnObject);
            }
            catch (error) {
                reject(error);
            }
        });
    }
    /**
     * Phương thức xác thực tính đúng đắn của lời gọi ipn từ VNPay
     * @en Method to verify the ipn url from VNPay
     *
     * @param query The object of data return from VNPay
     * @returns The return object
     */
    verifyIpnUrl(query) {
        return this.verifyReturnUrl(query);
    }
    /**
     * Đây là API để hệ thống merchant truy vấn kết quả thanh toán của giao dịch tại hệ thống VNPAY.
     * @en This is the API for the merchant system to query the payment result of the transaction at the VNPAY system.
     * @see https://sandbox.vnpayment.vn/apis/docs/truy-van-hoan-tien/querydr&refund.html#truy-van-ket-qua-thanh-toan-PAY
     *
     * @param {QueryDrSchema} query - The data to query
     * @returns {Promise<QueryDrResponseFromVNPaySchema>} The data return from VNPay
     */
    queryDr(query) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const command = 'querydr';
            const { vnp_Version = constants_1.VNP_VERSION } = query;
            const dataQuery = schemas_1.QueryDrSchema.parse(Object.assign({ vnp_Version }, query));
            const url = new URL((0, common_1.resolveUrlString)((_a = this.globalConfig.api_Host) !== null && _a !== void 0 ? _a : constants_1.VNPAY_GATEWAY_SANDBOX_HOST, constants_1.QUERY_DR_REFUND_ENDPOINT));
            const stringToCheckSum = `${dataQuery.vnp_RequestId}|${dataQuery.vnp_Version}|${command}` +
                `|${this.globalConfig.tmnCode}|${dataQuery.vnp_TxnRef}|${dataQuery.vnp_TransactionDate}` +
                `|${dataQuery.vnp_CreateDate}|${dataQuery.vnp_IpAddr}|${dataQuery.vnp_OrderInfo}`;
            const signed = crypto_1.default
                .createHmac(this.CRYPTO_ALGORITHM, this.globalConfig.secureSecret)
                .update(Buffer.from(stringToCheckSum, this.CRYPTO_ENCODING))
                .digest('hex');
            const body = Object.assign(Object.assign({}, dataQuery), { vnp_Command: command, vnp_TmnCode: this.globalConfig.tmnCode, vnp_SecureHash: signed });
            const response = yield fetch(url.toString(), {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(body),
            });
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            const responseData = (yield response.json());
            if (Number(responseData.vnp_ResponseCode) >= 90 &&
                Number(responseData.vnp_ResponseCode) <= 99) {
                return Object.assign(Object.assign({}, responseData), { vnp_Message: (0, common_1.getResponseByStatusCode)((_b = responseData.vnp_ResponseCode) === null || _b === void 0 ? void 0 : _b.toString(), this.globalConfig.vnp_Locale, constants_1.QUERY_DR_RESPONSE_MAP) });
            }
            const stringToCheckSumResponse = `${responseData.vnp_ResponseId}|${responseData.vnp_Command}|${responseData.vnp_ResponseCode}` +
                `|${responseData.vnp_Message}|${responseData.vnp_TmnCode}|${responseData.vnp_TxnRef}` +
                `|${responseData.vnp_Amount}|${responseData.vnp_BankCode}|${responseData.vnp_PayDate}` +
                `|${responseData.vnp_TransactionNo}|${responseData.vnp_TransactionType}|${responseData.vnp_TransactionStatus}` +
                `|${responseData.vnp_OrderInfo}|${responseData.vnp_PromotionCode}|${responseData.vnp_PromotionAmount}`;
            const signedResponse = crypto_1.default
                .createHmac(this.CRYPTO_ALGORITHM, this.globalConfig.secureSecret)
                .update(Buffer.from(stringToCheckSumResponse, this.CRYPTO_ENCODING))
                .digest('hex');
            if (signedResponse !== responseData.vnp_SecureHash) {
                throw new Error('Wrong checksum from VNPay response');
            }
            return Object.assign(Object.assign({}, responseData), { vnp_Message: (0, common_1.getResponseByStatusCode)((_c = responseData.vnp_ResponseCode) === null || _c === void 0 ? void 0 : _c.toString(), this.globalConfig.vnp_Locale, constants_1.QUERY_DR_RESPONSE_MAP) });
        });
    }
}
exports.VNPay = VNPay;
